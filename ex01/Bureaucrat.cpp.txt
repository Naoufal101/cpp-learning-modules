#include "Bureaucrat.hpp"

// Constructor
Bureaucrat::Bureaucrat(const std::string& name, int grade)
    : _name(name), _grade(grade) {
    if (_grade < 1)
        throw GradeTooHighException();
    else if (_grade > 150)
        throw GradeTooLowException();
}

// Copy Constructor
Bureaucrat::Bureaucrat(const Bureaucrat& other)
    : _name(other._name), _grade(other._grade) {
    // Grade validation is not necessary here as 'other' is already valid
}

// Assignment Operator
Bureaucrat& Bureaucrat::operator=(const Bureaucrat& other) {
    if (this != &other) {
        _grade = other._grade;
        // _name is const and cannot be assigned
    }
    return *this;
}

// Destructor
Bureaucrat::~Bureaucrat() {
    // No dynamic resources to clean up
}

// Accessors
const std::string& Bureaucrat::getName() const {
    return _name;
}

int Bureaucrat::getGrade() const {
    return _grade;
}

void Bureaucrat:: signForm(From& form) {
    try
    {
        form.besignd(*this);
        std::cout << getName << " signed " << form.getName() << std::endl;
    }
    catch (std::exception & e)
    {
        std::cout << getName() << " couldnâ€™t sign " << form.getName()
                  << "because" << e.what() << std::endl; 
    }
}

// Grade Modification
void Bureaucrat::incrementGrade() {
    if (_grade <= 1)
        throw GradeTooHighException();
    --_grade;
}

void Bureaucrat::decrementGrade() {
    if (_grade >= 150)
        throw GradeTooLowException();
    ++_grade;
}

// Exception Messages
const char* Bureaucrat::GradeTooHighException::what() const throw() {
    return "GradeTooHighException: Grade is too high.";
}

const char* Bureaucrat::GradeTooLowException::what() const throw() {
    return "GradeTooLowException: Grade is too low.";
}

// Overload of the insertion operator
std::ostream& operator<<(std::ostream& os, const Bureaucrat& bureaucrat) {
    os << bureaucrat.getName() << ", bureaucrat grade " << bureaucrat.getGrade() << ".";
    return os;
}
